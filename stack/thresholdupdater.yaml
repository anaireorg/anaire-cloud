apiVersion: apps/v1
kind: Deployment
metadata:
  name: thresholdupdater
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thresholdupdater
  template:
    metadata:
      labels:
        app: thresholdupdater
    spec:
      containers:
        - name: thresholdupdater
          image: python
          command: ["/bin/bash"]
          args: ["-c","/config/run.sh"]
          volumeMounts:
            - name: thresholdupdater
              mountPath: /config/
      volumes:
        - name: thresholdupdater
          configMap:
            name: thresholdupdater
            defaultMode: 0777
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: thresholdupdater
data:
  run.sh: |
    #!/bin/bash
    pip install paho-mqtt
    pip install requests
    pip install pyyaml
    while ((1))
    do 
      python /config/update_thresholds.py \${GRAFANA_NP_SERVICE_HOST} \${MQTT_NP_SERVICE_HOST}
      echo "ERROR: Script failed"
    done
    
  update_thresholds.py: |
    #!/usr/bin/env python
    import sys
    import requests
    import json
    import base64
    import yaml
    import time
    from paho.mqtt import client as mqtt

    justonce = False
    interval = 60

    ADMIN_LOGIN = 'admin'
    ADMIN_PASS = "${GRAFANA_ADMIN_PASSWORD}"
    query = "${DASHBOARD_TITLE}"

    def on_publish(client,userdata,result):
      print("data published \n")
      pass

    def main():
      if (len(sys.argv) != 3):
        print('Usage: '+sys.argv[0]+' <grafana IP> <mqttbroker IP>. Found '+str(len(sys.argv))+' arguments.')
        exit()
            
      client = mqtt.Client()
      client.on_publish = on_publish
      client.connect(sys.argv[2], 1883)
      
      warning = {}
      caution = {}
      while True:
        URL  = 'http://' + sys.argv[1] + ':3000/api/search?query=' + query
        HEADERS = {'Authorization': 'Basic '+base64.b64encode((ADMIN_LOGIN+':'+ADMIN_PASS).encode('ascii')).decode('ascii'), 'Content-type': 'application/json'}
        response = json.loads(requests.get(url=URL, headers=HEADERS).content)
        if len(response) > 0:
          uid = response[0].get('uid', None)
          if uid:
            URL  = 'http://' + sys.argv[1] + ':3000/api/dashboards/uid/' + uid
            response = json.loads(requests.get(url=URL, headers=HEADERS).content)
            
            for panel in response['dashboard'].get('panels',[]):
              if panel['type'] == 'gauge':
                title = panel['title']
                device = panel['targets'][0]['expr'].split('"')[1]
                pre_warning = int(warning.get(device, 0))
                pre_caution = int(caution.get(device, 0))
                for step in panel['fieldConfig']['defaults']['thresholds']['steps']:
                  if step['color'] == 'yellow':
                    warning[device] = step['value']
                  elif step['color'] == 'red':
                    caution[device] = step['value']
                
                msg = '{id: ' + device + ', warning: '+str(warning[device])+', caution: '+str(caution[device])+'}'
                if justonce:
                  if pre_warning != warning.get(device, 0) or pre_caution != caution.get(device, 0):
                    ret= client.publish("config",msg)
                else:
                    ret= client.publish("config",msg)
        time.sleep(interval)

    if __name__ == "__main__":
      main()

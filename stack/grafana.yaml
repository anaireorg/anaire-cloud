apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          env:
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: "${GRAFANA_ADMIN_PASSWORD}"
          - name: GF_SERVER_ROOT_URL
            value: "http://${PUBLIC_IP}:${GRAFANA_NODEPORT_PORT}"
          - name: GF_RENDERING_SERVER_URL
            value: "http://${RENDERER_CIP}/render"
          - name: GF_RENDERING_CALLBACK_URL
            value: "http://${PUBLIC_IP}:${GRAFANA_NODEPORT_PORT}/"
          - name: GF_LOG_FILTERS
            value: rendering:debug
          args:
          volumeMounts:
            - name: grafana-storage-volume
              mountPath: /var/lib/grafana/
            - name: grafana-config
              mountPath: /etc/grafana/provisioning/datasources/datasource.yaml
              subPath: datasource.yaml
      volumes:
        - name: grafana-storage-volume
          hostPath:
            path: /data/grafana
            type: Directory
        - name: grafana-config
          configMap:
            name: grafana-config
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
data:
  datasource.yaml: |
    apiVersion: 1
    deleteDatasources:
      - name: Prometheus
        orgId: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://${PROMETHEUS_CIP}
        version: 1
        editable: true
        isDefault: true
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-np
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3000
    nodePort: ${GRAFANA_NODEPORT_PORT}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apiserver
  template:
    metadata:
      labels:
        app: apiserver
    spec:
      containers:
        - name: apiserver
          image: python
          command: ["/bin/bash"]
          args: ["-c","/config/run.sh"]
          volumeMounts:
            - name: apiserver
              mountPath: /config/
          resources:
            {{- toYaml .Values.resources.apiserver | nindent 12 }}
      volumes:
        - name: apiserver
          configMap:
            name: apiserver
            defaultMode: 0777
---
apiVersion: v1
kind: Service
metadata:
  name: apiserver-np
spec:
  type: NodePort
  selector:
    app: apiserver
  ports:
  - protocol: TCP
    port: 8080
    nodePort: 30880

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: apiserver
data:
  run.sh: |
    #!/bin/bash
    pip install paho-mqtt
    pip install requests
    pip install pyyaml
    pip install bottle
    pip install unidecode
    pip install -U grafana_api
    cd /root/
    git clone https://github.com/anaireorg/anaire-cloud.git
    while ((1))
    do
      python /config/api_server.py grafana-np:3000 "{{ .Values.grafanaAdminPass }}" mqtt-np:1883
      echo "ERROR: Script failed"
    done

  api_server.py: |
    from bottle import route, run, request
    import json
    import sys
    import requests
    import json
    import base64
    import yaml
    import time
    from paho.mqtt import client as mqtt
    justonce = True
    interval = 5
    ADMIN_LOGIN = 'admin'

    if (len(sys.argv) != 4):
      print('Usage: '+sys.argv[0]+' <grafana IP:port> <GRAFANA_ADMIN_PASS> <mqtt IP:port>. Found '+str(len(sys.argv))+' arguments.')
      exit()
    GRAFANA_URL = sys.argv[1]
    ADMIN_PASS = sys.argv[2]
    MQTT_URL = sys.argv[3]

    HEADERS = {'Authorization': 'Basic '+base64.b64encode((ADMIN_LOGIN+':'+ADMIN_PASS).encode('ascii')).decode('ascii'), 'Content-type': 'application/json'}
    #reference dict
    reference_dict = {}
    client = mqtt.Client()

    @route('/update')
    def do_update():
        print('llega peticion')
        query = dict(request.query.decode())
        print(json.dumps(query))
        grafana_update(query)
        device_update(query)
        return "ok"

    def grafana_update(update):
        #if folderId is empty it is a call from the generic dashboard and no update in grafana proceed
        if update['folderId'] == '':
            print('Update from generic dashboard')
            return

        #Update 'general' dashboard
        URL  = 'http://' + GRAFANA_URL + '/api/search?type=dash-db&tag=general'
        response = json.loads(requests.get(url=URL, headers=HEADERS).content)
        if len(response) > 0:
          uid = response[0].get('uid', None)
          if uid:
            general_dashboard_url  = 'http://' + GRAFANA_URL + '/api/dashboards/uid/' + uid
            update_summary_dashboard(update, general_dashboard_url)

        #Update the area dashboard
        #Find the area dashboard with the appropriate folderId
        area_dashboard_list_url = 'http://' + GRAFANA_URL + '/api/search?type=dash-db&tag=area'
        area_dashboard_list = json.loads(requests.get(url=area_dashboard_list_url, headers=HEADERS).content)
        for area_dashboard in area_dashboard_list:
          if int(area_dashboard['folderId']) == int(update['folderId']):
            area_dashboard_url  = 'http://' + GRAFANA_URL + '/api/dashboards/uid/' + area_dashboard['uid']
            update_summary_dashboard(update, area_dashboard_url)
            break

        #Update device dashboard
        device_dashboard_url  = 'http://' + GRAFANA_URL + '/api/dashboards/uid/' + update['db_uid']
        update_device_dashboard(update, device_dashboard_url)

    def device_update(update):
        print('Send mqtt message')
        data = {
          'warning': update['warning'],
          'caution': update['caution'],
          'alarm': update['alarm'],
          'name': update['name'],
          'update': update['update'],
          'factory_reset': update['factory_reset'],
          'FRC': update['FRC'],
          'FRC_value': update['FRC_value'],
          'MQTT_server': update['MQTT_server'],
          'MQTT_port': update['MQTT_port'],
          'ABC': update['ABC'],
          'reboot': update['reboot'],
          'temperature_offset': update['temperature_offset'],
          'altitude_compensation': update['altitude_compensation']
        }
        client.publish("config/" + str(update['id']),json.dumps(data))

    def on_publish(client,userdata,result):
      print("data published \n")
      pass

    def post(URL,DATA,HEADERS):
      try:
        response = requests.post(url=URL, data=DATA,headers=HEADERS)
        return response.content
      except requests.exceptions.RequestException as e:  # This is the correct syntax
        raise SystemExit(e)

    def update_summary_dashboard(sensor_info, dashboard_url):
      try:
        '''
        print('*****************')
        print('Update summary ' + dashboard_url)
        print('sensor_info: ' + yaml.safe_dump(sensor_info))
        print('*****************')
        '''
        #Get the dashboard
        area_dashboard = json.loads(requests.get(url=dashboard_url, headers=HEADERS).content)
        #Find the panel with the link to the dashboard with uid sensor_info['db_uid']
        panel = next(panel for panel in area_dashboard['dashboard']['panels'] if (panel['type'] == 'stat' and panel['links'][0]['url'].split('/')[4] == str(sensor_info['db_uid'])))
        panel['title'] = sensor_info['name']
        #Update the caution thredshold
        panel['fieldConfig']['defaults']['thresholds']['steps'][2]['value'] = sensor_info['warning']
        panel['fieldConfig']['defaults']['thresholds']['steps'][3]['value'] = sensor_info['caution']
        area_dashboard['folderId'] = area_dashboard['meta']['folderId']

        #Update the dashboard
        response = post('http://' + GRAFANA_URL + '/api/dashboards/db', json.dumps(area_dashboard),HEADERS)
      except requests.exceptions.RequestException as e:
        raise SystemExit(e)

    def update_device_dashboard(sensor_info, dashboard_url):
      try:
        '''
        print('*****************')
        print('Update device ' + dashboard_url)
        print('caution: ' + yaml.safe_dump(sensor_info))
        print('*****************')
        '''
        #Get the dashboard
        device_dashboard = json.loads(requests.get(url=dashboard_url, headers=HEADERS).content)
        #Update the caution and warning thredsholds
        #print(yaml.safe_dump(device_dashboard['dashboard']['panels'][0]))
        device_dashboard['dashboard']['title'] = sensor_info['name']
        url = device_dashboard['dashboard']['links'][0]['url'].split('/')[2]
        device_dashboard['dashboard']['links'][0]['url'] = 'http://' + url + \
          '/d/editor/editor?var-id=' + sensor_info['id'] + \
          '&var-name=' + sensor_info['name'] + \
          '&var-Warning=' + sensor_info['warning'] + \
          '&var-Caution=' + sensor_info['caution']  + \
          '&var-db_uid=' + sensor_info['db_uid'] + \
          '&var-Alarm=' +sensor_info['alarm'] + \
          '&var-folderId=' +sensor_info['folderId'] + \
          '&var-FRC_value=' +sensor_info['FRC_value'] + \
          '&var-MQTT_server=' +sensor_info['MQTT_server'] + \
          '&var-MQTT_port=' +sensor_info['MQTT_port'] + \
          '&var-temperature_offset=' +sensor_info['temperature_offset'] + \
          '&var-altitude_compensation=' +sensor_info['altitude_compensation'] + \
          '&var-reboot=OFF' + \
          '&var-factory_reset=OFF' + \
          '&var-update=OFF' + \
          '&var-ABC=OFF' + \
          '&var-FRC=OFF'

        device_dashboard['dashboard']['panels'][0]['thresholds'][0]['value'] = int(sensor_info['warning'])
        device_dashboard['dashboard']['panels'][0]['thresholds'][1]['value'] = int(sensor_info['caution'])
        if 'alert'in device_dashboard['dashboard']['panels'][0]:
          device_dashboard['dashboard']['panels'][0]['alert']['conditions'][0]['evaluator']['params'][0] = int(sensor_info['caution'])
        device_dashboard['folderId'] = device_dashboard['meta']['folderId']
        #Update the dashboard
        response = post('http://' + GRAFANA_URL + '/api/dashboards/db', json.dumps(device_dashboard),HEADERS)
      except requests.exceptions.RequestException as e:
        raise SystemExit(e)

    def main():
      client.on_publish = on_publish
      client.connect(MQTT_URL.split(':')[0], int(MQTT_URL.split(':')[1]))
      client.loop_start()
      run(host='0.0.0.0', port=8080, debug=True)

    if __name__ == "__main__":
      main()
